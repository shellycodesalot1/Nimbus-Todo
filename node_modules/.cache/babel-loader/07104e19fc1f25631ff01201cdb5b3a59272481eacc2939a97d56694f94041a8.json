{"ast":null,"code":"import * as msal from '@azure/msal-browser';\n\n// üîê B2C Config\nconst b2cConfig = {\n  tenantName: \"nimbustodo1\",\n  clientId: \"6438927f-5f93-41f7-80aa-d6516cd19114\",\n  signUpSignInPolicy: \"B2C_1_nimbussignup_signin\",\n  authorityDomain: \"b2clogin.com\"\n};\n\n// üß≠ Authority URL\nconst authorityBase = `https://${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`;\nconst authority = `${authorityBase}/${b2cConfig.tenantName}.onmicrosoft.com/${b2cConfig.signUpSignInPolicy}`;\n\n// ‚öôÔ∏è MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: b2cConfig.clientId,\n    authority,\n    knownAuthorities: [`${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`],\n    redirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    postLogoutRedirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    navigateToLoginRequestUrl: true\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: false\n  },\n  system: {\n    allowRedirectInIframe: true,\n    loggerOptions: {\n      loggerCallback: (level, message) => console.log(`MSAL: ${message}`),\n      logLevel: msal.LogLevel.Warning\n    }\n  }\n};\n\n// üîë Login Scopes\nexport const loginRequest = {\n  scopes: [\"openid\", \"profile\", \"offline_access\"]\n};\n\n// üöÄ Export MSAL instance\nexport const msalInstance = new msal.PublicClientApplication(msalConfig);\n\n// üîê Helper for login (used in LoginPage.js)\nexport const handleMicrosoftLogin = async () => {\n  try {\n    const accounts = msalInstance.getAllAccounts();\n    if (accounts.length > 0) {\n      return {\n        name: accounts[0].name,\n        username: accounts[0].username\n      };\n    }\n    const response = await msalInstance.loginPopup(loginRequest);\n    const account = response.account;\n    return {\n      name: account.name,\n      username: account.username\n    };\n  } catch (error) {\n    console.error(\"‚ùå Microsoft login failed:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["msal","b2cConfig","tenantName","clientId","signUpSignInPolicy","authorityDomain","authorityBase","authority","msalConfig","auth","knownAuthorities","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","allowRedirectInIframe","loggerOptions","loggerCallback","level","message","console","log","logLevel","LogLevel","Warning","loginRequest","scopes","msalInstance","PublicClientApplication","handleMicrosoftLogin","accounts","getAllAccounts","length","name","username","response","loginPopup","account","error"],"sources":["/Users/shelliciabethune/Nimbus-To-Do/Nimbus-Todo/src/azure.js"],"sourcesContent":["import * as msal from '@azure/msal-browser';\n\n// üîê B2C Config\nconst b2cConfig = {\n  tenantName: \"nimbustodo1\",\n  clientId: \"6438927f-5f93-41f7-80aa-d6516cd19114\",\n  signUpSignInPolicy: \"B2C_1_nimbussignup_signin\",\n  authorityDomain: \"b2clogin.com\"\n};\n\n// üß≠ Authority URL\nconst authorityBase = `https://${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`;\nconst authority = `${authorityBase}/${b2cConfig.tenantName}.onmicrosoft.com/${b2cConfig.signUpSignInPolicy}`;\n\n// ‚öôÔ∏è MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: b2cConfig.clientId,\n    authority,\n    knownAuthorities: [`${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`],\n    redirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    postLogoutRedirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    navigateToLoginRequestUrl: true\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: false\n  },\n  system: {\n    allowRedirectInIframe: true,\n    loggerOptions: {\n      loggerCallback: (level, message) => console.log(`MSAL: ${message}`),\n      logLevel: msal.LogLevel.Warning,\n    }\n  }\n};\n\n// üîë Login Scopes\nexport const loginRequest = {\n  scopes: [\"openid\", \"profile\", \"offline_access\"]\n};\n\n// üöÄ Export MSAL instance\nexport const msalInstance = new msal.PublicClientApplication(msalConfig);\n\n// üîê Helper for login (used in LoginPage.js)\nexport const handleMicrosoftLogin = async () => {\n  try {\n    const accounts = msalInstance.getAllAccounts();\n    if (accounts.length > 0) {\n      return {\n        name: accounts[0].name,\n        username: accounts[0].username\n      };\n    }\n\n    const response = await msalInstance.loginPopup(loginRequest);\n    const account = response.account;\n\n    return {\n      name: account.name,\n      username: account.username,\n    };\n  } catch (error) {\n    console.error(\"‚ùå Microsoft login failed:\", error);\n    throw error;\n  }\n};\n\n"],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,qBAAqB;;AAE3C;AACA,MAAMC,SAAS,GAAG;EAChBC,UAAU,EAAE,aAAa;EACzBC,QAAQ,EAAE,sCAAsC;EAChDC,kBAAkB,EAAE,2BAA2B;EAC/CC,eAAe,EAAE;AACnB,CAAC;;AAED;AACA,MAAMC,aAAa,GAAG,WAAWL,SAAS,CAACC,UAAU,IAAID,SAAS,CAACI,eAAe,EAAE;AACpF,MAAME,SAAS,GAAG,GAAGD,aAAa,IAAIL,SAAS,CAACC,UAAU,oBAAoBD,SAAS,CAACG,kBAAkB,EAAE;;AAE5G;AACA,MAAMI,UAAU,GAAG;EACjBC,IAAI,EAAE;IACJN,QAAQ,EAAEF,SAAS,CAACE,QAAQ;IAC5BI,SAAS;IACTG,gBAAgB,EAAE,CAAC,GAAGT,SAAS,CAACC,UAAU,IAAID,SAAS,CAACI,eAAe,EAAE,CAAC;IAC1EM,WAAW,EAAE,kDAAkD;IAC/DC,qBAAqB,EAAE,kDAAkD;IACzEC,yBAAyB,EAAE;EAC7B,CAAC;EACDC,KAAK,EAAE;IACLC,aAAa,EAAE,cAAc;IAC7BC,sBAAsB,EAAE;EAC1B,CAAC;EACDC,MAAM,EAAE;IACNC,qBAAqB,EAAE,IAAI;IAC3BC,aAAa,EAAE;MACbC,cAAc,EAAEA,CAACC,KAAK,EAAEC,OAAO,KAAKC,OAAO,CAACC,GAAG,CAAC,SAASF,OAAO,EAAE,CAAC;MACnEG,QAAQ,EAAEzB,IAAI,CAAC0B,QAAQ,CAACC;IAC1B;EACF;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG;EAC1BC,MAAM,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,gBAAgB;AAChD,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG,IAAI9B,IAAI,CAAC+B,uBAAuB,CAACvB,UAAU,CAAC;;AAExE;AACA,OAAO,MAAMwB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;EAC9C,IAAI;IACF,MAAMC,QAAQ,GAAGH,YAAY,CAACI,cAAc,CAAC,CAAC;IAC9C,IAAID,QAAQ,CAACE,MAAM,GAAG,CAAC,EAAE;MACvB,OAAO;QACLC,IAAI,EAAEH,QAAQ,CAAC,CAAC,CAAC,CAACG,IAAI;QACtBC,QAAQ,EAAEJ,QAAQ,CAAC,CAAC,CAAC,CAACI;MACxB,CAAC;IACH;IAEA,MAAMC,QAAQ,GAAG,MAAMR,YAAY,CAACS,UAAU,CAACX,YAAY,CAAC;IAC5D,MAAMY,OAAO,GAAGF,QAAQ,CAACE,OAAO;IAEhC,OAAO;MACLJ,IAAI,EAAEI,OAAO,CAACJ,IAAI;MAClBC,QAAQ,EAAEG,OAAO,CAACH;IACpB,CAAC;EACH,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdlB,OAAO,CAACkB,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}