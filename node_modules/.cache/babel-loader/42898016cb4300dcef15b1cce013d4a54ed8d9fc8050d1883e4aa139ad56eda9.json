{"ast":null,"code":"const API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// ‚úÖ Add a new task (ungrouped)\nexport const addTask = async task => {\n  console.log(\"üõ∞Ô∏è Sending task to Azure (add_task):\", task);\n  const res = await fetch(`${API_BASE}/add_task`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(task)\n  });\n  const result = await res.json();\n  console.log(\"‚úÖ Azure responded to add_task:\", result);\n  return result;\n};\n\n// ‚úÖ Delete a task by ID\nexport const deleteTask = async taskId => {\n  console.log(\"üóëÔ∏è Sending delete request for task:\", taskId);\n  const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n    method: \"DELETE\"\n  });\n  const result = await res.text();\n  console.log(\"‚úÖ Azure responded to delete_task:\", result);\n  return result;\n};\n\n// ‚úÖ Edit a task by ID\nexport const editTask = async (taskId, updates) => {\n  console.log(\"‚úèÔ∏è Sending update for task:\", taskId, \"with data:\", updates);\n  const res = await fetch(`${API_BASE}/edit_task/${taskId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(updates)\n  });\n  const result = await res.json();\n  console.log(\"‚úÖ Azure responded to edit_task:\", result);\n  return result;\n};\n\n// ‚úÖ Fetch all tasks for a user\nexport const fetchUserTasks = async userId => {\n  console.log(\"üì° Fetching tasks for user:\", userId);\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks_by_user/${userId}`);\n    const data = await res.json();\n    console.log(\"üì¶ Grouped tasks received:\", data);\n    return data.groups; // expects: [{ id, title, tasks: [{ id, title, priority }] }]\n  } catch (error) {\n    console.error(\"‚ùå Error fetching user tasks:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a new task group\nexport const createNewTaskGroup = async (userId, title) => {\n  console.log(\"üìÅ Creating new group for user:\", userId, \"with title:\", title);\n  try {\n    const res = await fetch(`${API_BASE}/create_group`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId,\n        title\n      })\n    });\n    const data = await res.json();\n    console.log(\"‚úÖ Created group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error creating group:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Add a task into an existing group\nexport const createNewTask = async (userId, task) => {\n  console.log(\"üß© Adding grouped task for user:\", userId, \"with data:\", task);\n  try {\n    const payload = {\n      userId,\n      title: task.title,\n      priority: task.priority\n    };\n    if (task.groupId) {\n      payload.groupId = task.groupId;\n    }\n    const res = await fetch(`${API_BASE}/add_grouped_task`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = await res.json();\n    console.log(\"‚úÖ Added task to group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error adding grouped task:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["API_BASE","addTask","task","console","log","res","fetch","method","headers","body","JSON","stringify","result","json","deleteTask","taskId","text","editTask","updates","fetchUserTasks","userId","data","groups","error","createNewTaskGroup","title","createNewTask","payload","priority","groupId"],"sources":["/Users/marieezoua/Documents/School Files/GSU/Spring 2025/CSC 4311 - Cloud Computing/Project/Nimbus-Todo/src/api/azureFunctions.js"],"sourcesContent":["const API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// ‚úÖ Add a new task (ungrouped)\nexport const addTask = async (task) => {\n  console.log(\"üõ∞Ô∏è Sending task to Azure (add_task):\", task);\n\n  const res = await fetch(`${API_BASE}/add_task`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(task),\n  });\n\n  const result = await res.json();\n  console.log(\"‚úÖ Azure responded to add_task:\", result);\n  return result;\n};\n\n// ‚úÖ Delete a task by ID\nexport const deleteTask = async (taskId) => {\n  console.log(\"üóëÔ∏è Sending delete request for task:\", taskId);\n\n  const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n    method: \"DELETE\",\n  });\n\n  const result = await res.text();\n  console.log(\"‚úÖ Azure responded to delete_task:\", result);\n  return result;\n};\n\n// ‚úÖ Edit a task by ID\nexport const editTask = async (taskId, updates) => {\n  console.log(\"‚úèÔ∏è Sending update for task:\", taskId, \"with data:\", updates);\n\n  const res = await fetch(`${API_BASE}/edit_task/${taskId}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(updates),\n  });\n\n  const result = await res.json();\n  console.log(\"‚úÖ Azure responded to edit_task:\", result);\n  return result;\n};\n\n// ‚úÖ Fetch all tasks for a user\nexport const fetchUserTasks = async (userId) => {\n  console.log(\"üì° Fetching tasks for user:\", userId);\n\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks_by_user/${userId}`);\n    const data = await res.json();\n    console.log(\"üì¶ Grouped tasks received:\", data);\n    return data.groups; // expects: [{ id, title, tasks: [{ id, title, priority }] }]\n  } catch (error) {\n    console.error(\"‚ùå Error fetching user tasks:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a new task group\nexport const createNewTaskGroup = async (userId, title) => {\n  console.log(\"üìÅ Creating new group for user:\", userId, \"with title:\", title);\n\n  try {\n    const res = await fetch(`${API_BASE}/create_group`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ userId, title }),\n    });\n\n    const data = await res.json();\n    console.log(\"‚úÖ Created group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error creating group:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Add a task into an existing group\nexport const createNewTask = async (userId, task) => {\n  console.log(\"üß© Adding grouped task for user:\", userId, \"with data:\", task);\n\n  try {\n    const payload = {\n      userId,\n      title: task.title,\n      priority: task.priority,\n    };\n\n    if (task.groupId) {\n      payload.groupId = task.groupId;\n    }\n\n    const res = await fetch(`${API_BASE}/add_grouped_task`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload),\n    });\n\n    const data = await res.json();\n    console.log(\"‚úÖ Added task to group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error adding grouped task:\", error);\n    return [];\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}