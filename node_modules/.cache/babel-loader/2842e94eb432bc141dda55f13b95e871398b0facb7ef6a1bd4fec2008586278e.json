{"ast":null,"code":"const API_BASE = \"https://nimbustodo.azurewebsites.net/api\"; // Later, update this to your deployed Azure Function URL\n\nexport const addTask = async task => {\n  console.log(\"🛰️ Sending task to Azure (add):\", task);\n  const res = await fetch(\"https://nimbustodo.azurewebsites.net/api/add_task\", {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(task)\n  });\n  const result = await res.json();\n  console.log(\"✅ Azure responded to add_task:\", result);\n  return result;\n};\nexport const deleteTask = async taskId => {\n  console.log(\"🗑️ Sending delete request for task:\", taskId);\n  const res = await fetch(`https://nimbustodo.azurewebsites.net/api/delete_task/${taskId}`, {\n    method: \"DELETE\"\n  });\n  const result = await res.text();\n  console.log(\"✅ Azure responded to delete_task:\", result);\n  return result;\n};\nexport const editTask = async (taskId, updates) => {\n  console.log(\"✏️ Sending update for task:\", taskId, \"with data:\", updates);\n  const res = await fetch(`https://nimbustodo.azurewebsites.net/api/edit_task/${taskId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(updates)\n  });\n  const result = await res.json();\n  console.log(\"✅ Azure responded to edit_task:\", result);\n  return result;\n};\nexport const fetchUserTasks = async userId => {\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks_by_user/${userId}`);\n    const data = await res.json();\n    console.log(\"📦 Grouped tasks for user:\", data);\n    return data.groups; // expects: [{ id, title, tasks: [{ id, title, priority }] }]\n  } catch (error) {\n    console.error(\"Error fetching user tasks:\", error);\n    return [];\n  }\n};\n\n// 🆕 Create a new task group\nexport const createNewTaskGroup = async (userId, title) => {\n  try {\n    const res = await fetch(`${API_BASE}/create_group`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId,\n        title\n      })\n    });\n    const data = await res.json();\n    console.log(\"✅ Created group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"Error creating group:\", error);\n    return [];\n  }\n};\n\n// 🆕 Create a task inside a group\nexport const createNewTask = async (userId, task) => {\n  try {\n    const payload = {\n      userId,\n      title: task.title,\n      priority: task.priority\n    };\n    if (task.groupId) {\n      payload.groupId = task.groupId;\n    }\n    const res = await fetch(`${API_BASE}/add_grouped_task`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = await res.json();\n    console.log(\"✅ Added task to group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["API_BASE","addTask","task","console","log","res","fetch","method","headers","body","JSON","stringify","result","json","deleteTask","taskId","text","editTask","updates","fetchUserTasks","userId","data","groups","error","createNewTaskGroup","title","createNewTask","payload","priority","groupId"],"sources":["/Users/marieezoua/Documents/School Files/GSU/Spring 2025/CSC 4311 - Cloud Computing/Project/Nimbus-Todo/src/api/azureFunctions.js"],"sourcesContent":["const API_BASE = \"https://nimbustodo.azurewebsites.net/api\"; // Later, update this to your deployed Azure Function URL\n\nexport const addTask = async (task) => {\n    console.log(\"🛰️ Sending task to Azure (add):\", task);\n  \n    const res = await fetch(\"https://nimbustodo.azurewebsites.net/api/add_task\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(task),\n    });\n  \n    const result = await res.json();\n    console.log(\"✅ Azure responded to add_task:\", result);\n    return result;\n  };\n  \n  export const deleteTask = async (taskId) => {\n    console.log(\"🗑️ Sending delete request for task:\", taskId);\n  \n    const res = await fetch(`https://nimbustodo.azurewebsites.net/api/delete_task/${taskId}`, {\n      method: \"DELETE\",\n    });\n  \n    const result = await res.text();\n    console.log(\"✅ Azure responded to delete_task:\", result);\n    return result;\n  };\n  \n  export const editTask = async (taskId, updates) => {\n    console.log(\"✏️ Sending update for task:\", taskId, \"with data:\", updates);\n  \n    const res = await fetch(`https://nimbustodo.azurewebsites.net/api/edit_task/${taskId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(updates),\n    });\n  \n    const result = await res.json();\n    console.log(\"✅ Azure responded to edit_task:\", result);\n    return result;\n  };\n\n  export const fetchUserTasks = async (userId) => {\n    try {\n      const res = await fetch(`${API_BASE}/get_tasks_by_user/${userId}`);\n      const data = await res.json();\n      console.log(\"📦 Grouped tasks for user:\", data);\n      return data.groups; // expects: [{ id, title, tasks: [{ id, title, priority }] }]\n    } catch (error) {\n      console.error(\"Error fetching user tasks:\", error);\n      return [];\n    }\n  };\n\n  // 🆕 Create a new task group\n  export const createNewTaskGroup = async (userId, title) => {\n    try {\n      const res = await fetch(`${API_BASE}/create_group`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userId, title }),\n      });\n      const data = await res.json();\n      console.log(\"✅ Created group:\", data);\n      return await fetchUserTasks(userId);\n    } catch (error) {\n      console.error(\"Error creating group:\", error);\n      return [];\n    }\n  };\n\n  // 🆕 Create a task inside a group\n  export const createNewTask = async (userId, task) => {\n    try {\n      const payload = {\n        userId,\n        title: task.title,\n        priority: task.priority,\n      };\n\n      if (task.groupId) {\n        payload.groupId = task.groupId;\n      }\n\n      const res = await fetch(`${API_BASE}/add_grouped_task`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload),\n      });\n\n      const data = await res.json();\n      console.log(\"✅ Added task to group:\", data);\n      return await fetchUserTasks(userId);\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n      return [];\n    }\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}