{"ast":null,"code":"// azure.js\n\nconst API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// âœ… Fetch all tasks for a user\nexport const fetchUserTasks = async userId => {\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks?userId=${userId}`);\n    if (!res.ok) {\n      throw new Error(\"Failed to fetch tasks\");\n    }\n    const data = await res.json();\n    return data; // List of user's tasks\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    throw error;\n  }\n};\n\n// âœ… Add a new task\nexport const addTask = async taskData => {\n  try {\n    const res = await fetch(`${API_BASE}/add_task`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        description: taskData.description,\n        priority: taskData.priority,\n        status: taskData.status || \"To Do\",\n        userId: taskData.userId // ðŸ†• user ID\n      })\n    });\n    if (!res.ok) {\n      throw new Error(\"Failed to add task\");\n    }\n    const data = await res.json();\n    return data; // New task\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    throw error;\n  }\n};\n\n// âœ… Delete a task by task ID\nexport const deleteTask = async taskId => {\n  try {\n    const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n      method: \"DELETE\"\n    });\n    if (!res.ok) {\n      throw new Error(\"Failed to delete task\");\n    }\n    const text = await res.text();\n    return text; // Simple confirmation message\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw error;\n  }\n};\n\n// âœ… Edit a task by task ID\nexport const editTask = async (taskId, updatedData) => {\n  try {\n    const res = await fetch(`${API_BASE}/edit_task/${taskId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updatedData) // Example: { description, priority, status }\n    });\n    if (!res.ok) {\n      throw new Error(\"Failed to edit task\");\n    }\n    const data = await res.json();\n    return data; // Updated task\n  } catch (error) {\n    console.error(\"Error editing task:\", error);\n    throw error;\n  }\n};\n\n// âœ… Create a group (optional if you're using it)\nexport const createGroup = async groupName => {\n  try {\n    const res = await fetch(`${API_BASE}/create_group`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name: groupName\n      })\n    });\n    if (!res.ok) {\n      throw new Error(\"Failed to create group\");\n    }\n    const text = await res.text();\n    return text;\n  } catch (error) {\n    console.error(\"Error creating group:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE","fetchUserTasks","userId","res","fetch","ok","Error","data","json","error","console","addTask","taskData","method","headers","body","JSON","stringify","description","priority","status","deleteTask","taskId","text","editTask","updatedData","createGroup","groupName","name"],"sources":["/Users/marieezoua/Documents/School Files/GSU/Spring 2025/CSC 4311 - Cloud Computing/Project/Nimbus-Todo/src/azure.js"],"sourcesContent":["// azure.js\n\nconst API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// âœ… Fetch all tasks for a user\nexport const fetchUserTasks = async (userId) => {\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks?userId=${userId}`);\n    if (!res.ok) {\n      throw new Error(\"Failed to fetch tasks\");\n    }\n    const data = await res.json();\n    return data; // List of user's tasks\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    throw error;\n  }\n};\n\n// âœ… Add a new task\nexport const addTask = async (taskData) => {\n  try {\n    const res = await fetch(`${API_BASE}/add_task`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        description: taskData.description,\n        priority: taskData.priority,\n        status: taskData.status || \"To Do\",\n        userId: taskData.userId, // ðŸ†• user ID\n      }),\n    });\n\n    if (!res.ok) {\n      throw new Error(\"Failed to add task\");\n    }\n\n    const data = await res.json();\n    return data; // New task\n  } catch (error) {\n    console.error(\"Error adding task:\", error);\n    throw error;\n  }\n};\n\n// âœ… Delete a task by task ID\nexport const deleteTask = async (taskId) => {\n  try {\n    const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n      method: \"DELETE\",\n    });\n\n    if (!res.ok) {\n      throw new Error(\"Failed to delete task\");\n    }\n\n    const text = await res.text();\n    return text; // Simple confirmation message\n  } catch (error) {\n    console.error(\"Error deleting task:\", error);\n    throw error;\n  }\n};\n\n// âœ… Edit a task by task ID\nexport const editTask = async (taskId, updatedData) => {\n  try {\n    const res = await fetch(`${API_BASE}/edit_task/${taskId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(updatedData), // Example: { description, priority, status }\n    });\n\n    if (!res.ok) {\n      throw new Error(\"Failed to edit task\");\n    }\n\n    const data = await res.json();\n    return data; // Updated task\n  } catch (error) {\n    console.error(\"Error editing task:\", error);\n    throw error;\n  }\n};\n\n// âœ… Create a group (optional if you're using it)\nexport const createGroup = async (groupName) => {\n  try {\n    const res = await fetch(`${API_BASE}/create_group`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ name: groupName }),\n    });\n\n    if (!res.ok) {\n      throw new Error(\"Failed to create group\");\n    }\n\n    const text = await res.text();\n    return text;\n  } catch (error) {\n    console.error(\"Error creating group:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}