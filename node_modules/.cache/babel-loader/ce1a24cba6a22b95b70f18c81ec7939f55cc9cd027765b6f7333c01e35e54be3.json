{"ast":null,"code":"/*! @azure/msal-browser v4.11.0 2025-04-16 */\n'use strict';\n\nimport { PerformanceEvents, PromptValue, invokeAsync, ProtocolMode, AuthError, invoke } from '@azure/msal-common/browser';\nimport { StandardInteractionClient } from './StandardInteractionClient.mjs';\nimport { createBrowserAuthError } from '../error/BrowserAuthError.mjs';\nimport { InteractionType, BrowserConstants } from '../utils/BrowserConstants.mjs';\nimport { initiateEarRequest, monitorIframeForHash, initiateCodeRequest } from '../interaction_handler/SilentHandler.mjs';\nimport { NativeMessageHandler } from '../broker/nativeBroker/NativeMessageHandler.mjs';\nimport { preconnect } from '../utils/BrowserUtils.mjs';\nimport { deserializeResponse } from '../response/ResponseHandler.mjs';\nimport { handleResponseEAR, getAuthCodeRequestUrl, handleResponseCode } from '../protocol/Authorize.mjs';\nimport { generatePkceCodes } from '../crypto/PkceGenerator.mjs';\nimport { generateEarKey } from '../crypto/BrowserCrypto.mjs';\nimport { silentLogoutUnsupported } from '../error/BrowserAuthErrorCodes.mjs';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nclass SilentIframeClient extends StandardInteractionClient {\n  constructor(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, apiId, performanceClient, nativeStorageImpl, nativeMessageHandler, correlationId) {\n    super(config, storageImpl, browserCrypto, logger, eventHandler, navigationClient, performanceClient, nativeMessageHandler, correlationId);\n    this.apiId = apiId;\n    this.nativeStorage = nativeStorageImpl;\n  }\n  /**\r\n   * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\r\n   * @param request\r\n   */\n  async acquireToken(request) {\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientAcquireToken, request.correlationId);\n    // Check that we have some SSO data\n    if (!request.loginHint && !request.sid && (!request.account || !request.account.username)) {\n      this.logger.warning(\"No user hint provided. The authorization server may need more information to complete this request.\");\n    }\n    // Check the prompt value\n    const inputRequest = {\n      ...request\n    };\n    if (inputRequest.prompt) {\n      if (inputRequest.prompt !== PromptValue.NONE && inputRequest.prompt !== PromptValue.NO_SESSION) {\n        this.logger.warning(`SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${PromptValue.NONE}`);\n        inputRequest.prompt = PromptValue.NONE;\n      }\n    } else {\n      inputRequest.prompt = PromptValue.NONE;\n    }\n    // Create silent request\n    const silentRequest = await invokeAsync(this.initializeAuthorizationRequest.bind(this), PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest, this.logger, this.performanceClient, request.correlationId)(inputRequest, InteractionType.Silent);\n    silentRequest.platformBroker = NativeMessageHandler.isPlatformBrokerAvailable(this.config, this.logger, this.nativeMessageHandler, silentRequest.authenticationScheme);\n    preconnect(silentRequest.authority);\n    if (this.config.auth.protocolMode === ProtocolMode.EAR) {\n      return this.executeEarFlow(silentRequest);\n    } else {\n      return this.executeCodeFlow(silentRequest);\n    }\n  }\n  /**\r\n   * Executes auth code + PKCE flow\r\n   * @param request\r\n   * @returns\r\n   */\n  async executeCodeFlow(request) {\n    let authClient;\n    const serverTelemetryManager = this.initializeServerTelemetryManager(this.apiId);\n    try {\n      // Initialize the client\n      authClient = await invokeAsync(this.createAuthCodeClient.bind(this), PerformanceEvents.StandardInteractionClientCreateAuthCodeClient, this.logger, this.performanceClient, request.correlationId)({\n        serverTelemetryManager,\n        requestAuthority: request.authority,\n        requestAzureCloudOptions: request.azureCloudOptions,\n        requestExtraQueryParameters: request.extraQueryParameters,\n        account: request.account\n      });\n      return await invokeAsync(this.silentTokenHelper.bind(this), PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, request.correlationId)(authClient, request);\n    } catch (e) {\n      if (e instanceof AuthError) {\n        e.setCorrelationId(this.correlationId);\n        serverTelemetryManager.cacheFailedRequest(e);\n      }\n      if (!authClient || !(e instanceof AuthError) || e.errorCode !== BrowserConstants.INVALID_GRANT_ERROR) {\n        throw e;\n      }\n      this.performanceClient.addFields({\n        retryError: e.errorCode\n      }, this.correlationId);\n      return await invokeAsync(this.silentTokenHelper.bind(this), PerformanceEvents.SilentIframeClientTokenHelper, this.logger, this.performanceClient, this.correlationId)(authClient, request);\n    }\n  }\n  /**\r\n   * Executes EAR flow\r\n   * @param request\r\n   */\n  async executeEarFlow(request) {\n    const correlationId = request.correlationId;\n    const discoveredAuthority = await invokeAsync(this.getDiscoveredAuthority.bind(this), PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority, this.logger, this.performanceClient, correlationId)({\n      requestAuthority: request.authority,\n      requestAzureCloudOptions: request.azureCloudOptions,\n      requestExtraQueryParameters: request.extraQueryParameters,\n      account: request.account\n    });\n    const earJwk = await invokeAsync(generateEarKey, PerformanceEvents.GenerateEarKey, this.logger, this.performanceClient, correlationId)();\n    const silentRequest = {\n      ...request,\n      earJwk: earJwk\n    };\n    const msalFrame = await invokeAsync(initiateEarRequest, PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(this.config, discoveredAuthority, silentRequest, this.logger, this.performanceClient);\n    const responseType = this.config.auth.OIDCOptions.serverResponseType;\n    // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n    const responseString = await invokeAsync(monitorIframeForHash, PerformanceEvents.SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);\n    const serverParams = invoke(deserializeResponse, PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, correlationId)(responseString, responseType, this.logger);\n    return invokeAsync(handleResponseEAR, PerformanceEvents.HandleResponseEar, this.logger, this.performanceClient, correlationId)(silentRequest, serverParams, this.apiId, this.config, discoveredAuthority, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.nativeMessageHandler);\n  }\n  /**\r\n   * Currently Unsupported\r\n   */\n  logout() {\n    // Synchronous so we must reject\n    return Promise.reject(createBrowserAuthError(silentLogoutUnsupported));\n  }\n  /**\r\n   * Helper which acquires an authorization code silently using a hidden iframe from given url\r\n   * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\r\n   * @param navigateUrl\r\n   * @param userRequestScopes\r\n   */\n  async silentTokenHelper(authClient, request) {\n    const correlationId = request.correlationId;\n    this.performanceClient.addQueueMeasurement(PerformanceEvents.SilentIframeClientTokenHelper, correlationId);\n    const pkceCodes = await invokeAsync(generatePkceCodes, PerformanceEvents.GeneratePkceCodes, this.logger, this.performanceClient, correlationId)(this.performanceClient, this.logger, correlationId);\n    const silentRequest = {\n      ...request,\n      codeChallenge: pkceCodes.challenge\n    };\n    // Create authorize request url\n    const navigateUrl = await invokeAsync(getAuthCodeRequestUrl, PerformanceEvents.GetAuthCodeUrl, this.logger, this.performanceClient, correlationId)(this.config, authClient.authority, silentRequest, this.logger, this.performanceClient);\n    // Get the frame handle for the silent request\n    const msalFrame = await invokeAsync(initiateCodeRequest, PerformanceEvents.SilentHandlerInitiateAuthRequest, this.logger, this.performanceClient, correlationId)(navigateUrl, this.performanceClient, this.logger, correlationId, this.config.system.navigateFrameWait);\n    const responseType = this.config.auth.OIDCOptions.serverResponseType;\n    // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n    const responseString = await invokeAsync(monitorIframeForHash, PerformanceEvents.SilentHandlerMonitorIframeForHash, this.logger, this.performanceClient, correlationId)(msalFrame, this.config.system.iframeHashTimeout, this.config.system.pollIntervalMilliseconds, this.performanceClient, this.logger, correlationId, responseType);\n    const serverParams = invoke(deserializeResponse, PerformanceEvents.DeserializeResponse, this.logger, this.performanceClient, correlationId)(responseString, responseType, this.logger);\n    return invokeAsync(handleResponseCode, PerformanceEvents.HandleResponseCode, this.logger, this.performanceClient, correlationId)(request, serverParams, pkceCodes.verifier, this.apiId, this.config, authClient, this.browserStorage, this.nativeStorage, this.eventHandler, this.logger, this.performanceClient, this.nativeMessageHandler);\n  }\n}\nexport { SilentIframeClient };","map":{"version":3,"names":["SilentIframeClient","StandardInteractionClient","constructor","config","storageImpl","browserCrypto","logger","eventHandler","navigationClient","apiId","performanceClient","nativeStorageImpl","nativeMessageHandler","correlationId","nativeStorage","acquireToken","request","addQueueMeasurement","PerformanceEvents","SilentIframeClientAcquireToken","loginHint","sid","account","username","warning","inputRequest","prompt","PromptValue","NONE","NO_SESSION","silentRequest","invokeAsync","initializeAuthorizationRequest","bind","StandardInteractionClientInitializeAuthorizationRequest","InteractionType","Silent","platformBroker","NativeMessageHandler","isPlatformBrokerAvailable","authenticationScheme","preconnect","authority","auth","protocolMode","ProtocolMode","EAR","executeEarFlow","executeCodeFlow","authClient","serverTelemetryManager","initializeServerTelemetryManager","createAuthCodeClient","StandardInteractionClientCreateAuthCodeClient","requestAuthority","requestAzureCloudOptions","azureCloudOptions","requestExtraQueryParameters","extraQueryParameters","silentTokenHelper","SilentIframeClientTokenHelper","e","AuthError","setCorrelationId","cacheFailedRequest","errorCode","BrowserConstants","INVALID_GRANT_ERROR","addFields","retryError","discoveredAuthority","getDiscoveredAuthority","StandardInteractionClientGetDiscoveredAuthority","earJwk","generateEarKey","GenerateEarKey","msalFrame","initiateEarRequest","SilentHandlerInitiateAuthRequest","responseType","OIDCOptions","serverResponseType","responseString","monitorIframeForHash","SilentHandlerMonitorIframeForHash","system","iframeHashTimeout","pollIntervalMilliseconds","serverParams","invoke","deserializeResponse","DeserializeResponse","handleResponseEAR","HandleResponseEar","browserStorage","logout","Promise","reject","createBrowserAuthError","silentLogoutUnsupported","pkceCodes","generatePkceCodes","GeneratePkceCodes","codeChallenge","challenge","navigateUrl","getAuthCodeRequestUrl","GetAuthCodeUrl","initiateCodeRequest","navigateFrameWait","handleResponseCode","HandleResponseCode","verifier"],"sources":["/Users/shelliciabethune/Nimbus-To-Do/Nimbus-Todo/node_modules/@azure/msal-browser/src/interaction_client/SilentIframeClient.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    ICrypto,\n    Logger,\n    PromptValue,\n    AuthorizationCodeClient,\n    AuthError,\n    IPerformanceClient,\n    PerformanceEvents,\n    invokeAsync,\n    invoke,\n    ProtocolMode,\n    CommonAuthorizationUrlRequest,\n} from \"@azure/msal-common/browser\";\nimport { StandardInteractionClient } from \"./StandardInteractionClient.js\";\nimport { BrowserConfiguration } from \"../config/Configuration.js\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager.js\";\nimport { EventHandler } from \"../event/EventHandler.js\";\nimport { INavigationClient } from \"../navigation/INavigationClient.js\";\nimport {\n    createBrowserAuthError,\n    BrowserAuthErrorCodes,\n} from \"../error/BrowserAuthError.js\";\nimport {\n    InteractionType,\n    ApiId,\n    BrowserConstants,\n} from \"../utils/BrowserConstants.js\";\nimport {\n    initiateCodeRequest,\n    initiateEarRequest,\n    monitorIframeForHash,\n} from \"../interaction_handler/SilentHandler.js\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest.js\";\nimport { NativeMessageHandler } from \"../broker/nativeBroker/NativeMessageHandler.js\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult.js\";\nimport * as BrowserUtils from \"../utils/BrowserUtils.js\";\nimport * as ResponseHandler from \"../response/ResponseHandler.js\";\nimport * as Authorize from \"../protocol/Authorize.js\";\nimport { generatePkceCodes } from \"../crypto/PkceGenerator.js\";\nimport { generateEarKey } from \"../crypto/BrowserCrypto.js\";\n\nexport class SilentIframeClient extends StandardInteractionClient {\n    protected apiId: ApiId;\n    protected nativeStorage: BrowserCacheManager;\n\n    constructor(\n        config: BrowserConfiguration,\n        storageImpl: BrowserCacheManager,\n        browserCrypto: ICrypto,\n        logger: Logger,\n        eventHandler: EventHandler,\n        navigationClient: INavigationClient,\n        apiId: ApiId,\n        performanceClient: IPerformanceClient,\n        nativeStorageImpl: BrowserCacheManager,\n        nativeMessageHandler?: NativeMessageHandler,\n        correlationId?: string\n    ) {\n        super(\n            config,\n            storageImpl,\n            browserCrypto,\n            logger,\n            eventHandler,\n            navigationClient,\n            performanceClient,\n            nativeMessageHandler,\n            correlationId\n        );\n        this.apiId = apiId;\n        this.nativeStorage = nativeStorageImpl;\n    }\n\n    /**\n     * Acquires a token silently by opening a hidden iframe to the /authorize endpoint with prompt=none or prompt=no_session\n     * @param request\n     */\n    async acquireToken(\n        request: SsoSilentRequest\n    ): Promise<AuthenticationResult> {\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientAcquireToken,\n            request.correlationId\n        );\n        // Check that we have some SSO data\n        if (\n            !request.loginHint &&\n            !request.sid &&\n            (!request.account || !request.account.username)\n        ) {\n            this.logger.warning(\n                \"No user hint provided. The authorization server may need more information to complete this request.\"\n            );\n        }\n\n        // Check the prompt value\n        const inputRequest = { ...request };\n        if (inputRequest.prompt) {\n            if (\n                inputRequest.prompt !== PromptValue.NONE &&\n                inputRequest.prompt !== PromptValue.NO_SESSION\n            ) {\n                this.logger.warning(\n                    `SilentIframeClient. Replacing invalid prompt ${inputRequest.prompt} with ${PromptValue.NONE}`\n                );\n                inputRequest.prompt = PromptValue.NONE;\n            }\n        } else {\n            inputRequest.prompt = PromptValue.NONE;\n        }\n\n        // Create silent request\n        const silentRequest: CommonAuthorizationUrlRequest = await invokeAsync(\n            this.initializeAuthorizationRequest.bind(this),\n            PerformanceEvents.StandardInteractionClientInitializeAuthorizationRequest,\n            this.logger,\n            this.performanceClient,\n            request.correlationId\n        )(inputRequest, InteractionType.Silent);\n        silentRequest.platformBroker =\n            NativeMessageHandler.isPlatformBrokerAvailable(\n                this.config,\n                this.logger,\n                this.nativeMessageHandler,\n                silentRequest.authenticationScheme\n            );\n        BrowserUtils.preconnect(silentRequest.authority);\n\n        if (this.config.auth.protocolMode === ProtocolMode.EAR) {\n            return this.executeEarFlow(silentRequest);\n        } else {\n            return this.executeCodeFlow(silentRequest);\n        }\n    }\n\n    /**\n     * Executes auth code + PKCE flow\n     * @param request\n     * @returns\n     */\n    async executeCodeFlow(\n        request: CommonAuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        let authClient: AuthorizationCodeClient | undefined;\n        const serverTelemetryManager = this.initializeServerTelemetryManager(\n            this.apiId\n        );\n\n        try {\n            // Initialize the client\n            authClient = await invokeAsync(\n                this.createAuthCodeClient.bind(this),\n                PerformanceEvents.StandardInteractionClientCreateAuthCodeClient,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )({\n                serverTelemetryManager,\n                requestAuthority: request.authority,\n                requestAzureCloudOptions: request.azureCloudOptions,\n                requestExtraQueryParameters: request.extraQueryParameters,\n                account: request.account,\n            });\n\n            return await invokeAsync(\n                this.silentTokenHelper.bind(this),\n                PerformanceEvents.SilentIframeClientTokenHelper,\n                this.logger,\n                this.performanceClient,\n                request.correlationId\n            )(authClient, request);\n        } catch (e) {\n            if (e instanceof AuthError) {\n                (e as AuthError).setCorrelationId(this.correlationId);\n                serverTelemetryManager.cacheFailedRequest(e);\n            }\n\n            if (\n                !authClient ||\n                !(e instanceof AuthError) ||\n                e.errorCode !== BrowserConstants.INVALID_GRANT_ERROR\n            ) {\n                throw e;\n            }\n\n            this.performanceClient.addFields(\n                {\n                    retryError: e.errorCode,\n                },\n                this.correlationId\n            );\n\n            return await invokeAsync(\n                this.silentTokenHelper.bind(this),\n                PerformanceEvents.SilentIframeClientTokenHelper,\n                this.logger,\n                this.performanceClient,\n                this.correlationId\n            )(authClient, request);\n        }\n    }\n\n    /**\n     * Executes EAR flow\n     * @param request\n     */\n    async executeEarFlow(\n        request: CommonAuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = request.correlationId;\n        const discoveredAuthority = await invokeAsync(\n            this.getDiscoveredAuthority.bind(this),\n            PerformanceEvents.StandardInteractionClientGetDiscoveredAuthority,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )({\n            requestAuthority: request.authority,\n            requestAzureCloudOptions: request.azureCloudOptions,\n            requestExtraQueryParameters: request.extraQueryParameters,\n            account: request.account,\n        });\n\n        const earJwk = await invokeAsync(\n            generateEarKey,\n            PerformanceEvents.GenerateEarKey,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )();\n        const silentRequest = {\n            ...request,\n            earJwk: earJwk,\n        };\n        const msalFrame = await invokeAsync(\n            initiateEarRequest,\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            this.config,\n            discoveredAuthority,\n            silentRequest,\n            this.logger,\n            this.performanceClient\n        );\n\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await invokeAsync(\n            monitorIframeForHash,\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            msalFrame,\n            this.config.system.iframeHashTimeout,\n            this.config.system.pollIntervalMilliseconds,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            responseType\n        );\n\n        const serverParams = invoke(\n            ResponseHandler.deserializeResponse,\n            PerformanceEvents.DeserializeResponse,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(responseString, responseType, this.logger);\n\n        return invokeAsync(\n            Authorize.handleResponseEAR,\n            PerformanceEvents.HandleResponseEar,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            silentRequest,\n            serverParams,\n            this.apiId,\n            this.config,\n            discoveredAuthority,\n            this.browserStorage,\n            this.nativeStorage,\n            this.eventHandler,\n            this.logger,\n            this.performanceClient,\n            this.nativeMessageHandler\n        );\n    }\n\n    /**\n     * Currently Unsupported\n     */\n    logout(): Promise<void> {\n        // Synchronous so we must reject\n        return Promise.reject(\n            createBrowserAuthError(\n                BrowserAuthErrorCodes.silentLogoutUnsupported\n            )\n        );\n    }\n\n    /**\n     * Helper which acquires an authorization code silently using a hidden iframe from given url\n     * using the scopes requested as part of the id, and exchanges the code for a set of OAuth tokens.\n     * @param navigateUrl\n     * @param userRequestScopes\n     */\n    protected async silentTokenHelper(\n        authClient: AuthorizationCodeClient,\n        request: CommonAuthorizationUrlRequest\n    ): Promise<AuthenticationResult> {\n        const correlationId = request.correlationId;\n        this.performanceClient.addQueueMeasurement(\n            PerformanceEvents.SilentIframeClientTokenHelper,\n            correlationId\n        );\n        const pkceCodes = await invokeAsync(\n            generatePkceCodes,\n            PerformanceEvents.GeneratePkceCodes,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(this.performanceClient, this.logger, correlationId);\n\n        const silentRequest = {\n            ...request,\n            codeChallenge: pkceCodes.challenge,\n        };\n        // Create authorize request url\n        const navigateUrl = await invokeAsync(\n            Authorize.getAuthCodeRequestUrl,\n            PerformanceEvents.GetAuthCodeUrl,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            this.config,\n            authClient.authority,\n            silentRequest,\n            this.logger,\n            this.performanceClient\n        );\n\n        // Get the frame handle for the silent request\n        const msalFrame = await invokeAsync(\n            initiateCodeRequest,\n            PerformanceEvents.SilentHandlerInitiateAuthRequest,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            navigateUrl,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            this.config.system.navigateFrameWait\n        );\n\n        const responseType = this.config.auth.OIDCOptions.serverResponseType;\n        // Monitor the window for the hash. Return the string value and close the popup when the hash is received. Default timeout is 60 seconds.\n        const responseString = await invokeAsync(\n            monitorIframeForHash,\n            PerformanceEvents.SilentHandlerMonitorIframeForHash,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            msalFrame,\n            this.config.system.iframeHashTimeout,\n            this.config.system.pollIntervalMilliseconds,\n            this.performanceClient,\n            this.logger,\n            correlationId,\n            responseType\n        );\n        const serverParams = invoke(\n            ResponseHandler.deserializeResponse,\n            PerformanceEvents.DeserializeResponse,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(responseString, responseType, this.logger);\n\n        return invokeAsync(\n            Authorize.handleResponseCode,\n            PerformanceEvents.HandleResponseCode,\n            this.logger,\n            this.performanceClient,\n            correlationId\n        )(\n            request,\n            serverParams,\n            pkceCodes.verifier,\n            this.apiId,\n            this.config,\n            authClient,\n            this.browserStorage,\n            this.nativeStorage,\n            this.eventHandler,\n            this.logger,\n            this.performanceClient,\n            this.nativeMessageHandler\n        );\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}