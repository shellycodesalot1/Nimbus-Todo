{"ast":null,"code":"import * as msal from '@azure/msal-browser';\n\n// B2C Configuration\nconst b2cConfig = {\n  tenantName: \"nimbustodo1\",\n  clientId: \"6438927f-5f93-41f7-80aa-d6516cd19114\",\n  signUpSignInPolicy: \"B2C_1_nimbussignup_signin\",\n  authorityDomain: \"b2clogin.com\"\n};\n\n// Build authority URL\nconst authorityBase = `https://${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`;\nconst signUpSignInAuthority = `${authorityBase}/${b2cConfig.tenantName}.onmicrosoft.com/${b2cConfig.signUpSignInPolicy}`;\n\n// Microsoft Azure B2C configuration\nconst msalConfig = {\n  auth: {\n    clientId: b2cConfig.clientId,\n    authority: signUpSignInAuthority,\n    knownAuthorities: [`${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`],\n    redirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    validateAuthority: false,\n    postLogoutRedirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    navigateToLoginRequestUrl: true\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: false\n  },\n  system: {\n    allowRedirectInIframe: true,\n    iframeHashTimeout: 6000\n  }\n};\n\n// Debug logging\nconsole.log('B2C Authority:', signUpSignInAuthority);\nconsole.log('MSAL Config:', {\n  clientId: msalConfig.auth.clientId,\n  authority: msalConfig.auth.authority,\n  redirectUri: msalConfig.auth.redirectUri,\n  knownAuthorities: msalConfig.auth.knownAuthorities\n});\nexport const loginRequest = {\n  scopes: [\"openid\", \"profile\", \"offline_access\"]\n};\n\n// Initialize MSAL instance\nconst msalInstance = new msal.PublicClientApplication(msalConfig);\n\n// Initialize MSAL\nmsalInstance.initialize().catch(error => {\n  console.error(\"Failed to initialize MSAL:\", error);\n});\n\n// Function to handle Microsoft login\nexport async function handleMicrosoftLogin() {\n  try {\n    // Ensure MSAL is initialized\n    if (!msalInstance.initialized) {\n      await msalInstance.initialize();\n    }\n    console.log('Attempting login with config:', msalConfig);\n    const authResult = await msalInstance.loginPopup({\n      ...loginRequest,\n      prompt: \"select_account\"\n    });\n    console.log(\"Login successful\", authResult);\n\n    // Get user info from claims\n    const userInfo = {\n      name: authResult.account.name,\n      username: authResult.account.username\n    };\n    return userInfo;\n  } catch (error) {\n    console.error(\"Login failed\", error);\n    console.error(\"Error details:\", {\n      name: error.name,\n      message: error.message,\n      errorCode: error.errorCode,\n      stack: error.stack\n    });\n    throw error;\n  }\n}","map":{"version":3,"names":["msal","b2cConfig","tenantName","clientId","signUpSignInPolicy","authorityDomain","authorityBase","signUpSignInAuthority","msalConfig","auth","authority","knownAuthorities","redirectUri","validateAuthority","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","allowRedirectInIframe","iframeHashTimeout","console","log","loginRequest","scopes","msalInstance","PublicClientApplication","initialize","catch","error","handleMicrosoftLogin","initialized","authResult","loginPopup","prompt","userInfo","name","account","username","message","errorCode","stack"],"sources":["/Users/shelliciabethune/Nimbus-To-Do/Nimbus-Todo/src/azure.js"],"sourcesContent":["import * as msal from '@azure/msal-browser';\n\n// B2C Configuration\nconst b2cConfig = {\n    tenantName: \"nimbustodo1\",\n    clientId: \"6438927f-5f93-41f7-80aa-d6516cd19114\",\n    signUpSignInPolicy: \"B2C_1_nimbussignup_signin\",\n    authorityDomain: \"b2clogin.com\"\n};\n\n// Build authority URL\nconst authorityBase = `https://${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`;\nconst signUpSignInAuthority = `${authorityBase}/${b2cConfig.tenantName}.onmicrosoft.com/${b2cConfig.signUpSignInPolicy}`;\n\n// Microsoft Azure B2C configuration\nconst msalConfig = {\n    auth: {\n        clientId: b2cConfig.clientId,\n        authority: signUpSignInAuthority,\n        knownAuthorities: [`${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`],\n        redirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n        validateAuthority: false,\n        postLogoutRedirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n        navigateToLoginRequestUrl: true\n    },\n    cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: false\n    },\n    system: {\n        allowRedirectInIframe: true,\n        iframeHashTimeout: 6000\n    }\n};\n\n// Debug logging\nconsole.log('B2C Authority:', signUpSignInAuthority);\nconsole.log('MSAL Config:', {\n    clientId: msalConfig.auth.clientId,\n    authority: msalConfig.auth.authority,\n    redirectUri: msalConfig.auth.redirectUri,\n    knownAuthorities: msalConfig.auth.knownAuthorities\n});\n\nexport const loginRequest = {\n    scopes: [\n        \"openid\",\n        \"profile\",\n        \"offline_access\"\n    ]\n};\n\n// Initialize MSAL instance\nconst msalInstance = new msal.PublicClientApplication(msalConfig);\n\n// Initialize MSAL\nmsalInstance.initialize().catch(error => {\n    console.error(\"Failed to initialize MSAL:\", error);\n});\n\n// Function to handle Microsoft login\nexport async function handleMicrosoftLogin() {\n    try {\n        // Ensure MSAL is initialized\n        if (!msalInstance.initialized) {\n            await msalInstance.initialize();\n        }\n        \n        console.log('Attempting login with config:', msalConfig);\n        \n        const authResult = await msalInstance.loginPopup({\n            ...loginRequest,\n            prompt: \"select_account\"\n        });\n        console.log(\"Login successful\", authResult);\n        \n        // Get user info from claims\n        const userInfo = {\n            name: authResult.account.name,\n            username: authResult.account.username,\n        };\n        \n        return userInfo;\n        \n    } catch (error) {\n        console.error(\"Login failed\", error);\n        console.error(\"Error details:\", {\n            name: error.name,\n            message: error.message,\n            errorCode: error.errorCode,\n            stack: error.stack\n        });\n        throw error;\n    }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}