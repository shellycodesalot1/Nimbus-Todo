{"ast":null,"code":"import*as msal from'@azure/msal-browser';// üîê B2C Config\nconst b2cConfig={tenantName:\"nimbustodo1\",clientId:\"6438927f-5f93-41f7-80aa-d6516cd19114\",signUpSignInPolicy:\"B2C_1_nimbussignup_signin\",authorityDomain:\"b2clogin.com\"};// üß≠ Authority URL\nconst authorityBase=`https://${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`;const authority=`${authorityBase}/${b2cConfig.tenantName}.onmicrosoft.com/${b2cConfig.signUpSignInPolicy}`;// ‚öôÔ∏è MSAL Configuration\nconst msalConfig={auth:{clientId:b2cConfig.clientId,authority,knownAuthorities:[`${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`],redirectUri:\"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",postLogoutRedirectUri:\"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",navigateToLoginRequestUrl:true},cache:{cacheLocation:\"localStorage\",storeAuthStateInCookie:false},system:{allowRedirectInIframe:true,loggerOptions:{loggerCallback:(level,message)=>console.log(`MSAL: ${message}`),logLevel:msal.LogLevel.Warning}}};// üîë Login Scopes\nexport const loginRequest={scopes:[\"openid\",\"profile\",\"offline_access\"]};// üöÄ Create and export MSAL instance\nexport const msalInstance=new msal.PublicClientApplication(msalConfig);// ‚úÖ Initialize MSAL before login\nexport const initializeMsal=async()=>{try{await msalInstance.initialize();console.log(\"MSAL initialized successfully ‚úÖ\");}catch(error){console.error(\"‚ùå MSAL initialization failed:\",error);throw error;}};// ‚úÖ Login Helper (Now includes initialization check)\nexport const handleMicrosoftLogin=async()=>{try{// Ensure MSAL is initialized\nif(!msalInstance.getActiveAccount()){await initializeMsal();}// Try logging in\nconst response=await msalInstance.loginPopup(loginRequest);const account=response.account;msalInstance.setActiveAccount(account);// Set active account\nreturn{name:account.name,username:account.username};}catch(error){console.error(\"‚ùå Microsoft login failed:\",error);throw error;}};","map":{"version":3,"names":["msal","b2cConfig","tenantName","clientId","signUpSignInPolicy","authorityDomain","authorityBase","authority","msalConfig","auth","knownAuthorities","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","allowRedirectInIframe","loggerOptions","loggerCallback","level","message","console","log","logLevel","LogLevel","Warning","loginRequest","scopes","msalInstance","PublicClientApplication","initializeMsal","initialize","error","handleMicrosoftLogin","getActiveAccount","response","loginPopup","account","setActiveAccount","name","username"],"sources":["/Users/shelliciabethune/Nimbus-To-Do/Nimbus-Todo/src/azure.js"],"sourcesContent":["import * as msal from '@azure/msal-browser';\n\n// üîê B2C Config\nconst b2cConfig = {\n  tenantName: \"nimbustodo1\",\n  clientId: \"6438927f-5f93-41f7-80aa-d6516cd19114\",\n  signUpSignInPolicy: \"B2C_1_nimbussignup_signin\",\n  authorityDomain: \"b2clogin.com\"\n};\n\n// üß≠ Authority URL\nconst authorityBase = `https://${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`;\nconst authority = `${authorityBase}/${b2cConfig.tenantName}.onmicrosoft.com/${b2cConfig.signUpSignInPolicy}`;\n\n// ‚öôÔ∏è MSAL Configuration\nconst msalConfig = {\n  auth: {\n    clientId: b2cConfig.clientId,\n    authority,\n    knownAuthorities: [`${b2cConfig.tenantName}.${b2cConfig.authorityDomain}`],\n    redirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    postLogoutRedirectUri: \"https://ashy-grass-0bd7dc61e.azurestaticapps.net\",\n    navigateToLoginRequestUrl: true\n  },\n  cache: {\n    cacheLocation: \"localStorage\",\n    storeAuthStateInCookie: false\n  },\n  system: {\n    allowRedirectInIframe: true,\n    loggerOptions: {\n      loggerCallback: (level, message) => console.log(`MSAL: ${message}`),\n      logLevel: msal.LogLevel.Warning\n    }\n  }\n};\n\n// üîë Login Scopes\nexport const loginRequest = {\n  scopes: [\"openid\", \"profile\", \"offline_access\"]\n};\n\n// üöÄ Create and export MSAL instance\nexport const msalInstance = new msal.PublicClientApplication(msalConfig);\n\n// ‚úÖ Initialize MSAL before login\nexport const initializeMsal = async () => {\n  try {\n    await msalInstance.initialize();\n    console.log(\"MSAL initialized successfully ‚úÖ\");\n  } catch (error) {\n    console.error(\"‚ùå MSAL initialization failed:\", error);\n    throw error;\n  }\n};\n\n// ‚úÖ Login Helper (Now includes initialization check)\nexport const handleMicrosoftLogin = async () => {\n  try {\n    // Ensure MSAL is initialized\n    if (!msalInstance.getActiveAccount()) {\n      await initializeMsal();\n    }\n\n    // Try logging in\n    const response = await msalInstance.loginPopup(loginRequest);\n    const account = response.account;\n    msalInstance.setActiveAccount(account);  // Set active account\n\n    return {\n      name: account.name,\n      username: account.username\n    };\n  } catch (error) {\n    console.error(\"‚ùå Microsoft login failed:\", error);\n    throw error;\n  }\n};"],"mappings":"AAAA,MAAO,GAAK,CAAAA,IAAI,KAAM,qBAAqB,CAE3C;AACA,KAAM,CAAAC,SAAS,CAAG,CAChBC,UAAU,CAAE,aAAa,CACzBC,QAAQ,CAAE,sCAAsC,CAChDC,kBAAkB,CAAE,2BAA2B,CAC/CC,eAAe,CAAE,cACnB,CAAC,CAED;AACA,KAAM,CAAAC,aAAa,CAAG,WAAWL,SAAS,CAACC,UAAU,IAAID,SAAS,CAACI,eAAe,EAAE,CACpF,KAAM,CAAAE,SAAS,CAAG,GAAGD,aAAa,IAAIL,SAAS,CAACC,UAAU,oBAAoBD,SAAS,CAACG,kBAAkB,EAAE,CAE5G;AACA,KAAM,CAAAI,UAAU,CAAG,CACjBC,IAAI,CAAE,CACJN,QAAQ,CAAEF,SAAS,CAACE,QAAQ,CAC5BI,SAAS,CACTG,gBAAgB,CAAE,CAAC,GAAGT,SAAS,CAACC,UAAU,IAAID,SAAS,CAACI,eAAe,EAAE,CAAC,CAC1EM,WAAW,CAAE,kDAAkD,CAC/DC,qBAAqB,CAAE,kDAAkD,CACzEC,yBAAyB,CAAE,IAC7B,CAAC,CACDC,KAAK,CAAE,CACLC,aAAa,CAAE,cAAc,CAC7BC,sBAAsB,CAAE,KAC1B,CAAC,CACDC,MAAM,CAAE,CACNC,qBAAqB,CAAE,IAAI,CAC3BC,aAAa,CAAE,CACbC,cAAc,CAAEA,CAACC,KAAK,CAAEC,OAAO,GAAKC,OAAO,CAACC,GAAG,CAAC,SAASF,OAAO,EAAE,CAAC,CACnEG,QAAQ,CAAEzB,IAAI,CAAC0B,QAAQ,CAACC,OAC1B,CACF,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,CAC1BC,MAAM,CAAE,CAAC,QAAQ,CAAE,SAAS,CAAE,gBAAgB,CAChD,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,GAAI,CAAA9B,IAAI,CAAC+B,uBAAuB,CAACvB,UAAU,CAAC,CAExE;AACA,MAAO,MAAM,CAAAwB,cAAc,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CACF,KAAM,CAAAF,YAAY,CAACG,UAAU,CAAC,CAAC,CAC/BV,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAChD,CAAE,MAAOU,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CAC9C,GAAI,CACF;AACA,GAAI,CAACL,YAAY,CAACM,gBAAgB,CAAC,CAAC,CAAE,CACpC,KAAM,CAAAJ,cAAc,CAAC,CAAC,CACxB,CAEA;AACA,KAAM,CAAAK,QAAQ,CAAG,KAAM,CAAAP,YAAY,CAACQ,UAAU,CAACV,YAAY,CAAC,CAC5D,KAAM,CAAAW,OAAO,CAAGF,QAAQ,CAACE,OAAO,CAChCT,YAAY,CAACU,gBAAgB,CAACD,OAAO,CAAC,CAAG;AAEzC,MAAO,CACLE,IAAI,CAAEF,OAAO,CAACE,IAAI,CAClBC,QAAQ,CAAEH,OAAO,CAACG,QACpB,CAAC,CACH,CAAE,MAAOR,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACjD,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}