{"ast":null,"code":"const API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// ‚úÖ Create a new task\nexport const addTask = async task => {\n  console.log(\"üß© Adding task with data:\", task);\n  try {\n    const res = await fetch(`${API_BASE}/add_task`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(task) // ‚ùóSend full correct fields including userId\n    });\n    const data = await res.json();\n    console.log(\"‚úÖ Added task:\", data);\n    return data; // ‚úÖ return the created task (not call fetchUserTasks here)\n  } catch (error) {\n    console.error(\"‚ùå Error adding task:\", error);\n    throw error;\n  }\n};\n\n// ‚úÖ Delete a task by ID\nexport const deleteTask = async taskId => {\n  console.log(\"üóëÔ∏è Sending delete request for task:\", taskId);\n  const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n    method: \"DELETE\"\n  });\n  const result = await res.text();\n  console.log(\"‚úÖ Azure responded to delete_task:\", result);\n  return result;\n};\n\n// ‚úÖ Edit a task by ID\nexport const editTask = async (taskId, updates, userId) => {\n  console.log(\"‚úèÔ∏è Sending update for task:\", taskId, \"with data:\", updates, \"and userId:\", userId);\n  const payload = {\n    ...updates,\n    userId // ‚úÖ Include userId in the body\n  };\n  const res = await fetch(`https://nimbustodo.azurewebsites.net/api/edit_task/${taskId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) {\n    const errorText = await res.text();\n    console.error(\"API Error Response:\", errorText);\n    throw new Error(`Failed to edit task: ${res.status} ${errorText}`);\n  }\n  const result = await res.json();\n  console.log(\"‚úÖ Azure responded to edit_task:\", result);\n  return result;\n};\n\n// ‚úÖ Fetch all tasks (filtered by userId)\nexport const fetchUserTasks = async userId => {\n  console.log(\"üì° Fetching all tasks for user:\", userId);\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks?userId=${userId}`); // ‚ùó Add ?userId= param\n    const data = await res.json();\n    console.log(\"üì¶ Raw tasks from backend:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"‚ùå Error fetching tasks:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a focus session record\nexport const addFocusSession = async session => {\n  console.log(\"üß† Adding focus session:\", session);\n  try {\n    const res = await fetch(`${API_BASE}/add_focus_session`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(session)\n    });\n    const data = await res.json();\n    console.log(\"‚úÖ Focus session saved:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"‚ùå Error saving focus session:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE","addTask","task","console","log","res","fetch","method","headers","body","JSON","stringify","data","json","error","deleteTask","taskId","result","text","editTask","updates","userId","payload","ok","errorText","Error","status","fetchUserTasks","addFocusSession","session"],"sources":["/Users/marieezoua/Documents/School Files/GSU/Spring 2025/CSC 4311 - Cloud Computing/Project/Nimbus-Todo/src/api/azureFunctions.js"],"sourcesContent":["const API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// ‚úÖ Create a new task\nexport const addTask = async (task) => {\n  console.log(\"üß© Adding task with data:\", task);\n\n  try {\n    const res = await fetch(`${API_BASE}/add_task`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(task), // ‚ùóSend full correct fields including userId\n    });\n\n    const data = await res.json();\n    console.log(\"‚úÖ Added task:\", data);\n    return data; // ‚úÖ return the created task (not call fetchUserTasks here)\n  } catch (error) {\n    console.error(\"‚ùå Error adding task:\", error);\n    throw error;\n  }\n};\n\n// ‚úÖ Delete a task by ID\nexport const deleteTask = async (taskId) => {\n  console.log(\"üóëÔ∏è Sending delete request for task:\", taskId);\n\n  const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n    method: \"DELETE\",\n  });\n\n  const result = await res.text();\n  console.log(\"‚úÖ Azure responded to delete_task:\", result);\n  return result;\n};\n\n// ‚úÖ Edit a task by ID\nexport const editTask = async (taskId, updates, userId) => {\n  console.log(\"‚úèÔ∏è Sending update for task:\", taskId, \"with data:\", updates, \"and userId:\", userId);\n\n  const payload = {\n    ...updates,\n    userId, // ‚úÖ Include userId in the body\n  };\n\n  const res = await fetch(`https://nimbustodo.azurewebsites.net/api/edit_task/${taskId}`, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(payload),\n  });\n\n  if (!res.ok) {\n    const errorText = await res.text();\n    console.error(\"API Error Response:\", errorText);\n    throw new Error(`Failed to edit task: ${res.status} ${errorText}`);\n  }\n\n  const result = await res.json();\n  console.log(\"‚úÖ Azure responded to edit_task:\", result);\n  return result;\n};\n\n\n// ‚úÖ Fetch all tasks (filtered by userId)\nexport const fetchUserTasks = async (userId) => {\n  console.log(\"üì° Fetching all tasks for user:\", userId);\n\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks?userId=${userId}`); // ‚ùó Add ?userId= param\n    const data = await res.json();\n    console.log(\"üì¶ Raw tasks from backend:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"‚ùå Error fetching tasks:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a focus session record\nexport const addFocusSession = async (session) => {\n  console.log(\"üß† Adding focus session:\", session);\n\n  try {\n    const res = await fetch(`${API_BASE}/add_focus_session`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(session),\n    });\n\n    const data = await res.json();\n    console.log(\"‚úÖ Focus session saved:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"‚ùå Error saving focus session:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}