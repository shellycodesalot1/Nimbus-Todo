{"ast":null,"code":"/*! @azure/msal-common v15.5.1 2025-04-15 */\n'use strict';\n\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n/**\r\n * Wraps a function with a performance measurement.\r\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invoke = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return function () {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    if (correlationId) {\n      // Track number of times this API is called in a single request\n      const eventCount = eventName + \"CallCount\";\n      telemetryClient?.incrementFields({\n        [eventCount]: 1\n      }, correlationId);\n    }\n    try {\n      const result = callback(...arguments);\n      inProgressEvent?.end({\n        success: true\n      });\n      logger.trace(`Returning result from ${eventName}`);\n      return result;\n    } catch (e) {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      }, e);\n      throw e;\n    }\n  };\n};\n/**\r\n * Wraps an async function with a performance measurement.\r\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\r\n * @param callback\r\n * @param eventName\r\n * @param logger\r\n * @param telemetryClient\r\n * @param correlationId\r\n * @returns\r\n * @internal\r\n *\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst invokeAsync = (callback, eventName, logger, telemetryClient, correlationId) => {\n  return function () {\n    logger.trace(`Executing function ${eventName}`);\n    const inProgressEvent = telemetryClient?.startMeasurement(eventName, correlationId);\n    if (correlationId) {\n      // Track number of times this API is called in a single request\n      const eventCount = eventName + \"CallCount\";\n      telemetryClient?.incrementFields({\n        [eventCount]: 1\n      }, correlationId);\n    }\n    telemetryClient?.setPreQueueTime(eventName, correlationId);\n    return callback(...arguments).then(response => {\n      logger.trace(`Returning result from ${eventName}`);\n      inProgressEvent?.end({\n        success: true\n      });\n      return response;\n    }).catch(e => {\n      logger.trace(`Error occurred in ${eventName}`);\n      try {\n        logger.trace(JSON.stringify(e));\n      } catch (e) {\n        logger.trace(\"Unable to print error message.\");\n      }\n      inProgressEvent?.end({\n        success: false\n      }, e);\n      throw e;\n    });\n  };\n};\nexport { invoke, invokeAsync };","map":{"version":3,"names":["invoke","callback","eventName","logger","telemetryClient","correlationId","trace","inProgressEvent","startMeasurement","eventCount","incrementFields","result","arguments","end","success","e","JSON","stringify","invokeAsync","setPreQueueTime","then","response","catch"],"sources":["/Users/shelliciabethune/Nimbus-To-Do/Nimbus-Todo/node_modules/@azure/msal-common/src/utils/FunctionWrappers.ts"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger } from \"../logger/Logger.js\";\nimport { IPerformanceClient } from \"../telemetry/performance/IPerformanceClient.js\";\n\n/**\n * Wraps a function with a performance measurement.\n * Usage: invoke(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invoke = <T extends Array<any>, U>(\n    callback: (...args: T) => U,\n    eventName: string,\n    logger: Logger,\n    telemetryClient?: IPerformanceClient,\n    correlationId?: string\n) => {\n    return (...args: T): U => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(\n            eventName,\n            correlationId\n        );\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields(\n                { [eventCount]: 1 },\n                correlationId\n            );\n        }\n        try {\n            const result = callback(...args);\n            inProgressEvent?.end({\n                success: true,\n            });\n            logger.trace(`Returning result from ${eventName}`);\n            return result;\n        } catch (e) {\n            logger.trace(`Error occurred in ${eventName}`);\n            try {\n                logger.trace(JSON.stringify(e));\n            } catch (e) {\n                logger.trace(\"Unable to print error message.\");\n            }\n            inProgressEvent?.end(\n                {\n                    success: false,\n                },\n                e\n            );\n            throw e;\n        }\n    };\n};\n\n/**\n * Wraps an async function with a performance measurement.\n * Usage: invokeAsync(functionToCall, performanceClient, \"EventName\", \"correlationId\")(...argsToPassToFunction)\n * @param callback\n * @param eventName\n * @param logger\n * @param telemetryClient\n * @param correlationId\n * @returns\n * @internal\n *\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const invokeAsync = <T extends Array<any>, U>(\n    callback: (...args: T) => Promise<U>,\n    eventName: string,\n    logger: Logger,\n    telemetryClient?: IPerformanceClient,\n    correlationId?: string\n) => {\n    return (...args: T): Promise<U> => {\n        logger.trace(`Executing function ${eventName}`);\n        const inProgressEvent = telemetryClient?.startMeasurement(\n            eventName,\n            correlationId\n        );\n        if (correlationId) {\n            // Track number of times this API is called in a single request\n            const eventCount = eventName + \"CallCount\";\n            telemetryClient?.incrementFields(\n                { [eventCount]: 1 },\n                correlationId\n            );\n        }\n        telemetryClient?.setPreQueueTime(eventName, correlationId);\n        return callback(...args)\n            .then((response) => {\n                logger.trace(`Returning result from ${eventName}`);\n                inProgressEvent?.end({\n                    success: true,\n                });\n                return response;\n            })\n            .catch((e) => {\n                logger.trace(`Error occurred in ${eventName}`);\n                try {\n                    logger.trace(JSON.stringify(e));\n                } catch (e) {\n                    logger.trace(\"Unable to print error message.\");\n                }\n                inProgressEvent?.end(\n                    {\n                        success: false,\n                    },\n                    e\n                );\n                throw e;\n            });\n    };\n};\n"],"mappings":";;;AAAA;;;AAGG;AAKH;;;;;;;;;;AAUG;AACH;AACO,MAAMA,MAAM,GAAGA,CAClBC,QAA2B,EAC3BC,SAAiB,EACjBC,MAAc,EACdC,eAAoC,EACpCC,aAAsB,KACtB;EACA,OAAO,YAAkB;IACrBF,MAAM,CAACG,KAAK,CAAC,sBAAsBJ,SAAS,EAAE,CAAC;IAC/C,MAAMK,eAAe,GAAGH,eAAe,EAAEI,gBAAgB,CACrDN,SAAS,EACTG,aAAa,CAChB;IACD,IAAIA,aAAa,EAAE;;MAEf,MAAMI,UAAU,GAAGP,SAAS,GAAG,WAAW;MAC1CE,eAAe,EAAEM,eAAe,CAC5B;QAAE,CAACD,UAAU,GAAG;MAAC,CAAE,EACnBJ,aAAa,CAChB;IACJ;IACD,IAAI;MACA,MAAMM,MAAM,GAAGV,QAAQ,CAAC,GAAAW,SAAO,CAAC;MAChCL,eAAe,EAAEM,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACFX,MAAM,CAACG,KAAK,CAAC,yBAAyBJ,SAAS,EAAE,CAAC;MAClD,OAAOS,MAAM;IAChB,EAAC,OAAOI,CAAC,EAAE;MACRZ,MAAM,CAACG,KAAK,CAAC,qBAAqBJ,SAAS,EAAE,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACG,KAAK,CAACU,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MAClC,EAAC,OAAOA,CAAC,EAAE;QACRZ,MAAM,CAACG,KAAK,CAAC,gCAAgC,CAAC;MACjD;MACDC,eAAe,EAAEM,GAAG,CAChB;QACIC,OAAO,EAAE;OACZ,EACDC,CAAC,CACJ;MACD,MAAMA,CAAC;IACV;EACL,CAAC;AACL;AAEA;;;;;;;;;;;AAWG;AACH;AACO,MAAMG,WAAW,GAAGA,CACvBjB,QAAoC,EACpCC,SAAiB,EACjBC,MAAc,EACdC,eAAoC,EACpCC,aAAsB,KACtB;EACA,OAAO,YAA2B;IAC9BF,MAAM,CAACG,KAAK,CAAC,sBAAsBJ,SAAS,EAAE,CAAC;IAC/C,MAAMK,eAAe,GAAGH,eAAe,EAAEI,gBAAgB,CACrDN,SAAS,EACTG,aAAa,CAChB;IACD,IAAIA,aAAa,EAAE;;MAEf,MAAMI,UAAU,GAAGP,SAAS,GAAG,WAAW;MAC1CE,eAAe,EAAEM,eAAe,CAC5B;QAAE,CAACD,UAAU,GAAG;MAAC,CAAE,EACnBJ,aAAa,CAChB;IACJ;IACDD,eAAe,EAAEe,eAAe,CAACjB,SAAS,EAAEG,aAAa,CAAC;IAC1D,OAAOJ,QAAQ,CAAC,GAAAW,SAAO,CAAC,CACnBQ,IAAI,CAAEC,QAAQ,IAAI;MACflB,MAAM,CAACG,KAAK,CAAC,yBAAyBJ,SAAS,EAAE,CAAC;MAClDK,eAAe,EAAEM,GAAG,CAAC;QACjBC,OAAO,EAAE;MACZ,EAAC;MACF,OAAOO,QAAQ;IACnB,CAAC,CAAC,CACDC,KAAK,CAAEP,CAAC,IAAI;MACTZ,MAAM,CAACG,KAAK,CAAC,qBAAqBJ,SAAS,EAAE,CAAC;MAC9C,IAAI;QACAC,MAAM,CAACG,KAAK,CAACU,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;MAClC,EAAC,OAAOA,CAAC,EAAE;QACRZ,MAAM,CAACG,KAAK,CAAC,gCAAgC,CAAC;MACjD;MACDC,eAAe,EAAEM,GAAG,CAChB;QACIC,OAAO,EAAE;OACZ,EACDC,CAAC,CACJ;MACD,MAAMA,CAAC;IACX,CAAC,CAAC;EACV,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}