{"ast":null,"code":"const API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// ‚úÖ Fetch all task groups and their tasks for a user\nexport const fetchUserTasks = async userId => {\n  console.log(\"üì° Fetching grouped tasks for user:\", userId);\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks_by_user/${userId}`);\n    const data = await res.json();\n    console.log(\"üì¶ Grouped tasks received:\", data);\n    return data.groups; // expects: [{ id, title, tasks: [{ id, title/description, priority }] }]\n  } catch (error) {\n    console.error(\"‚ùå Error fetching user tasks:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a new task group\nexport const createNewTaskGroup = async (userId, title) => {\n  console.log(\"üìÅ Creating group for user:\", userId, \"Title:\", title);\n  try {\n    const res = await fetch(`${API_BASE}/create_group`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId,\n        title\n      })\n    });\n    const data = await res.json();\n    console.log(\"‚úÖ Created group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error creating group:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a new task (inside a group if groupId is provided)\nexport const createNewTask = async (userId, task) => {\n  console.log(\"üß© Adding task for user:\", userId, \"Data:\", task);\n  try {\n    const payload = {\n      userId,\n      title: task.title,\n      priority: task.priority\n    };\n    if (task.groupId) {\n      payload.groupId = task.groupId;\n    }\n    const res = await fetch(`${API_BASE}/add_grouped_task`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = await res.json();\n    console.log(\"‚úÖ Task added:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error adding task:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Edit a task by ID\nexport const editTask = async (taskId, updates) => {\n  console.log(\"‚úèÔ∏è Editing task:\", taskId, \"Updates:\", updates);\n  try {\n    const res = await fetch(`${API_BASE}/edit_task/${taskId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(updates)\n    });\n    const data = await res.json();\n    console.log(\"‚úÖ Task updated:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"‚ùå Error editing task:\", error);\n    throw error;\n  }\n};\n\n// ‚úÖ Delete a task by ID\nexport const deleteTask = async taskId => {\n  console.log(\"üóëÔ∏è Deleting task:\", taskId);\n  try {\n    const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n      method: \"DELETE\"\n    });\n    const result = await res.text();\n    console.log(\"‚úÖ Task deleted:\", result);\n    return result;\n  } catch (error) {\n    console.error(\"‚ùå Error deleting task:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE","fetchUserTasks","userId","console","log","res","fetch","data","json","groups","error","createNewTaskGroup","title","method","headers","body","JSON","stringify","createNewTask","task","payload","priority","groupId","editTask","taskId","updates","deleteTask","result","text"],"sources":["/Users/marieezoua/Documents/School Files/GSU/Spring 2025/CSC 4311 - Cloud Computing/Project/Nimbus-Todo/src/api/azureFunctions.js"],"sourcesContent":["const API_BASE = \"https://nimbustodo.azurewebsites.net/api\";\n\n// ‚úÖ Fetch all task groups and their tasks for a user\nexport const fetchUserTasks = async (userId) => {\n  console.log(\"üì° Fetching grouped tasks for user:\", userId);\n\n  try {\n    const res = await fetch(`${API_BASE}/get_tasks_by_user/${userId}`);\n    const data = await res.json();\n    console.log(\"üì¶ Grouped tasks received:\", data);\n    return data.groups; // expects: [{ id, title, tasks: [{ id, title/description, priority }] }]\n  } catch (error) {\n    console.error(\"‚ùå Error fetching user tasks:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a new task group\nexport const createNewTaskGroup = async (userId, title) => {\n  console.log(\"üìÅ Creating group for user:\", userId, \"Title:\", title);\n\n  try {\n    const res = await fetch(`${API_BASE}/create_group`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ userId, title }),\n    });\n\n    const data = await res.json();\n    console.log(\"‚úÖ Created group:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error creating group:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Create a new task (inside a group if groupId is provided)\nexport const createNewTask = async (userId, task) => {\n  console.log(\"üß© Adding task for user:\", userId, \"Data:\", task);\n\n  try {\n    const payload = {\n      userId,\n      title: task.title,\n      priority: task.priority,\n    };\n\n    if (task.groupId) {\n      payload.groupId = task.groupId;\n    }\n\n    const res = await fetch(`${API_BASE}/add_grouped_task`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(payload),\n    });\n\n    const data = await res.json();\n    console.log(\"‚úÖ Task added:\", data);\n    return await fetchUserTasks(userId);\n  } catch (error) {\n    console.error(\"‚ùå Error adding task:\", error);\n    return [];\n  }\n};\n\n// ‚úÖ Edit a task by ID\nexport const editTask = async (taskId, updates) => {\n  console.log(\"‚úèÔ∏è Editing task:\", taskId, \"Updates:\", updates);\n\n  try {\n    const res = await fetch(`${API_BASE}/edit_task/${taskId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(updates),\n    });\n\n    const data = await res.json();\n    console.log(\"‚úÖ Task updated:\", data);\n    return data;\n  } catch (error) {\n    console.error(\"‚ùå Error editing task:\", error);\n    throw error;\n  }\n};\n\n// ‚úÖ Delete a task by ID\nexport const deleteTask = async (taskId) => {\n  console.log(\"üóëÔ∏è Deleting task:\", taskId);\n\n  try {\n    const res = await fetch(`${API_BASE}/delete_task/${taskId}`, {\n      method: \"DELETE\",\n    });\n\n    const result = await res.text();\n    console.log(\"‚úÖ Task deleted:\", result);\n    return result;\n  } catch (error) {\n    console.error(\"‚ùå Error deleting task:\", error);\n    throw error;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}